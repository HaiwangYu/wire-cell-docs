The ~wire-cell-gen~ package provides components for the generation of data.  It primarily includes components which perform the grand convolution of drifted electron distribution, field and electronics response and associate statistical fluctuations (aka, the "drift simulation").

* Depositions

Depositions (~IDepo~ data objects, aka /depo/) are provided by ~IDepoSource~ components.  A single depo is provided on each call to the source and are expected to be produce in /strict time order/.  In general a depo represents a 2D  distribution (ie, Gaussian) of drifting electrons spread in longitudinal and transverse directions.  A depo may be confined to a single point where the two /extents/ of the distribution are zero.  

The ~IDepoSource~ components adapt to external sources of information about initial activity in the detector.  These sources may provide $dE$ and $dX$ in which case two models can be applied to produce associated number of ionized electrons.  The external source may provide only $dE$ in which case the number of ionized electrons will be calculated for the deposition on the assumption that the particle is a MIP.  Finally, the ionization process may be handled by the external source and the number of electrons may be given directly.

* Drifting

The ~IDrifter~ components are responsible for transforming a depo at one location and time into another depo at a different location and time while suitably adjusting the number of ionization electrons and their 2D extents.  Each call of the component accepts a single depo and returns zero or more output depos.  Input depos are assumed to be strictly time ordered and each batch of output depos likewise.  In general a drifter must cache depos for some length of time in order to assure it has seen all possible depos to satisfy causality for the output.

* Response

The field and electronics response of the detector is calculated in an ~IDuctor~ component.  This is typically done by accepting depos at some /input plane/ or /response plane/.  Up to this plane, any drifting depo is assumed to induce a negligible detector response.  For drifting beyond this plane some position dependent  response is applied (ie, a field response calculated by 2D Garfield or 3D LARF).  Each call to an ~IDuctor~ components accepts one depo and produces zero or more frames (~IFrame~ data object).  In general an ~IDuctor~ component must cache depos long enough to assure the produced frames satisfy causality.  Output frames may be sparse in that not all channels may have traces (~ITrace~ data objects) and in any given channel the traces may not cover the same span of time.  The unit for the waveforms in the frame depend on the detector response applied.  If field response alone is applied then the waveform is in units of sampled current (fixme, check code, it may be integrated over tick and thus charge.)  If both field and electronics response is applied the waveform is in units of voltage.


* Digitizing

An ~IDigitizer~ component applies a transformation to the waveform, typically but not necessarily in order to truncate it to ADC.  These components are functional in that each call takes and produces one frame.  Even if truncating to ADC the frame is still expressed as floating point values.

* Noise

t.b.d.

* Frame Summing

Right now, frames can be summed by a bare function ~FrameUtil::sum()~.  This is better put into a component.

* Execution Graphs

The ~gen~ package provides high-level ~IApplication~ components.  Primarily, these provide aggregation of the various components described above (and others).  The aggregation is conceptually of the form of a call graph which connects outputs of components to inputs of others.  This aggregation is *hard-coded* so that the application determines the connectivity of the resulting execution graph.  

- Fourdee :: provides a simple linear drift simulation chain from depos to digitized frame and with noise included.  Only a single detector response is allowed and a single frame with signal and noise summed together is produced.  (Aside: the "dee" stands for the various components with names starting with "D".)

- Multidee :: provides a drift simulation that takes depositions through multiple paths and which produce multiple semantically different frames for the same set of depositions.  The overall execution graph is shown in the figure below.  The ~DepoFanout~ represents sending the same depo to multiple ~Ductor~ components.  The ~MultiDuctor~ will apply particular detector response depending on where the depo is (measured in wire-space).  This can be used to emulate MicroBooNE's shorted wires.  A second pointer to a depo goes into the "truth" ~Ductor~ which has a set of field response functions that produce some kind of "true" signal waveforms from the input depositions (eg, a simple Gaussian smearing instead of bipolar/unipolar field response).  Finally, each frame is sunk for output by the ~MultiFrameSink~ which is just an ~IFrameSink~ that collates based on frame identifier numbers.

[[file:figs/multidee.svg]]

** Hard-coded vs Configurable

WCT supports construction of general execution graphs through user-provided configuration.  

t.b.d. this code needs reworking and retesting.
