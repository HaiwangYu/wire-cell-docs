This section lists a reverse timeline of some newsworthy updates and commits to WCT.

* [2017-06-23 Fri] New Configuration Data Package

Today a new package joins the WCT family.  

https://github.com/WireCell/wire-cell-data

This collects the "configuration data" files which are needed for
input to WCT.  These are generally compressed JSON files which have
been converted to a WCT standard format from a variety of sources.
The data includes wire geometry, field response, noise spectra and a
couple initial deposition files.  

Having this repository makes it easier for users to prepare to run
WCT.  At some point in the future this package may be installed along
with the code, but for now, users need to clone this repo.  For WCT to
locate these files the produced directory needs to be added to the
user's =WIRECELL_PATH= environment variable.

See the [[https://github.com/WireCell/wire-cell-data/blob/master/README.org][README]] file for details including a summary of the files
available and commands to remake these files from their upstream
sources.

Previously this data was kept online [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/data/][in a directory]] dump.  That's
still there for now.  It includes some files not added to GitHub.  In
particular the "upstream" data from which the JSON files are converted
(eg, the Garfield output) can be found.  And next door to that
directory is a [[http://www.phy.bnl.gov/~bviren/tmp/wctsim/wct-dev/share/wirecell/plots/][plot dump directory]] which contains some diagnostic
plots related to the conversion of these files which may be useful for
experts to browse.


* [2017-06-21 Wed] Build cleanups

Today sees some long needed cleanups in how we build WCT and WCP and their externals.  In particular:

- [[http://jsonnet.org/][Jsonnet]], now *required* by WCT has a build package added to [[https://github.com/WireCell/wire-cell-spack/blob/master/repo/packages/jsonnet/package.py][wire-cell-spack]]. 
- A [[http://www.phy.bnl.gov/~bviren/wire-cell-spack-mirror/][source mirror]] is now available in case you have trouble getting any required dependencies.  The Spack build will use this mirror automatically after being configured as shown in [[https://github.com/WireCell/wire-cell-spack/blob/master/README.org#failure-to-download-a-package-source][the README]] file.
- Besides the tip of the =master= branch, specific releases starting with 0.5.2 of WCT can now be installed with Spack.
- The WCP and its dependencies can now be built using wire-cell-spack.  WCP uses a subset of the packages that WCT requires and the two can be installed side-by-side sharing these packages.
- See also [[https://github.com/WireCell/wire-cell-spack/blob/master/README.org#using-spack-views][this section of the README]] for recommended way to develop either WCP or WCT code against Spack-built dependencies.
- The cursed XData package is removed from both WCP and WCT.

* [2017-06-20 Tue] Exceptions

Throwing exceptions is now a SOP for indicating some error.  As you
write configurable components, be particularly liberal with throwing
exceptions inside of the ~configure()~ method.  The ~wire-cell~ CLI
will catch these and exit.  Other applications of the WCT that do not,
will at least fail early if any exception is thrown and thus the user
can fix the problem without delay.

WCT uses Boost exception support hidden with a thin layer to keep
things looking simple.  When you program WCT code with exceptions do
like:

#+BEGIN_SRC c++
  #include "WireCellUtil/Exceptions.h"  

  void MyComponent::configure(Configuration cfg)
  {
      std::string mytool_tn = get<std::string>(cfg, "mytool");
      if (mytool_tn.empty()) {
          THROW(ValueError() << errmsg{"You must set \"mytool\" to something"});
      }
       m_mytool = Factory::find_tn<IMyTool>(mytool_tn);
       if (!m_mytool) {
           THROW(ValueError() << errmsg{"Failed to find IMyTool: " + mytool_tn});
       }
  }
#+END_SRC

Notes:

1) All exceptions that WCT code may throw are defined in the header file included in the example.  
2) Instead of the low-level C++ ~throw()~ use the provided CPP macro ~THROW()~ which will give the user extra info in the case that an exception is not caught.
3) The value returned may have an ~errmsg~ streamed to it which will add some dynamic description of the error in the form of a string.  If a complex string needs to be build see ~WireCell::String::format()~.
4) No special C++ is needed to catch exceptions.

 
* [2017-06-17 Sat]  Basic Simulation Essentially Working and CellTree support

Hanyu Wei has done great job getting the basic drift and response
simulation finished.  In particular it now properly handles the
exceeding fine-scale interpolation that is essential for having
realistically smooth induction signals as a particle's ionization
track moves from the region around one field response path to its
neighbor.  This improvement makes negligible impact on speed.  Also
included is proper drift processes and their statistics as well as the
introduction of an addition RC response for amplifier after the preamp
(for MicroBooNE).  

Hanyu also added a [[https://github.com/WireCell/wire-cell-sio/blob/master/src/CelltreeFrameSink.cxx][new frame sink]] to write out "celltree" file format.
This ROOT-based format has been used for a while now to transfer data
between the Wire-Cell Prototype and other applications.


* [2017-06-16 Fri] Jsonnet now mandatory and CLI parameter injection

[[https://github.com/google/jsonnet][Jsonnet]] is now a required external dependency.  It is just far too
useful to keep optional and it's a very light-weight package so easy
to build.  However, it is not yet added to ~wire-cell-spack~ (see
[[https://github.com/WireCell/wire-cell-spack/issues/1][inaugural issue]]).  Building it yourself is simple but non-standard.
Follow this guide:

1) Get the source and do ~make all~
2) Copy the two header under ~include/~ at some installation path.
3) Similarly,   copy the two shared libraries to ~lib/~ at some installation path.
4) Finally, copy the executable binary ~jsonnet~ to some ~bin/~.

One annoyance with the elaborate configuration which Jsonnet makes
easy is that, for some things, you do not want to constantly edit a
file just to make some small change.  In particular, initial input and
final output files are often best given directly on the command line
rather than in some configuration file.  Jsonnet also comes to the
rescue here by allowing external parameters to be "injected" into the
configuration using its ~std.extVar("name")~ function.  

For this to work, the author of some configuration calls this function
where they would otherwise type in the value.  Then the user must
supply that value on the ~wire-cell~ command line or if compiling the
Jsonnet to JSON via the ~jsonnet~ CLI.  

An example is in the configuration supporting the new "multi-ductor"
feature (stay tuned for details).  One spot it is used can be found in
[[https://github.com/WireCell/wire-cell-cfg/blob/master/multi/depos.jsonnet][depos.jsonnet]] where the input file holding depositions is set.  The
user of ~wire-cell~ or ~jsonnet~ sets a value for this variable in the
same way: by simply adding a ~-V~ flag.  Here is a full example with
some comments to explain:

#+BEGIN_EXAMPLE
  $ wire-cell \
     -V detector=uboone \                         # (1)
     -V depofile=g4tuple-qsn-v1-fixed.json.bz2 \  # (2)
     -V framefile=uboone.root \                   # (3)
     -c multi/init.jsonnet \                      # (4) 
     -c multi/multiductor.jsonnet                 # (5)
#+END_EXAMPLE

Notes:
1) A variable =detector= is used in various places of the configuration to switch between some global parameters specific to that detector.
2) The input =depofile= is set.  Remember that WCT will look for JSON/Jonnet files in directories given in the =WIRECELL_PATH= environment variable.  
3) The output =framefile= is set.  This will hold all the frames of traces (aka the "event") that get simulated.
4) The first of two configuration files that being the list of configurables.
5) The "meat" of the configuration.




