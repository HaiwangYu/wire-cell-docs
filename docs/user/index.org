* User Manual

There are a number of ways to use Wire Cell in a non-programmatic way.  
Wire Cell provides a few built-in ways to directly make use of its functionality.  
You may also use Wire Cell as part of some larger system or framework (see their own documentation for details).  
This manual documents how to use the user interfaces provided directly by Wire Cell software.

** Using Bee

t.b.d.

** Command line application

Wire Cell provides a single, general-purpose command line interface (CLI) program called =wire-cell=.  

#+BEGIN_EXAMPLE
  $ wire-cell [options] [arguments]
  $ wire-cell --help
  Options:
    --help                 wire-cell [options] [argments]
    -c [ --config ] arg    set configuration file
    -p [ --plugin ] arg    specify a plugin
    -C [ --component ] arg specify a component
    --dump-config arg      dump configuration to file
#+END_EXAMPLE

By default, this command does very little but rather is heavily configurable.
The bulk of the configuration is given in a configuration file.


*** Components 

Wire Cell component objects (or components) are concrete instances of interface classes.  
They are located by their concrete class name and an optional instance name.
The =wire-cell= CLI will assemble an overall job by aggregating and connecting components.

*** Plugins

The =wire-cell= CLI can look for components inside special shared libraries call "plugins".  
A set of plugins can be specified on the command line.

*** Component Configuration

Every Wire Cell component is created in some default state as determined in the source code.  
It may then be configured with information supplied by the user on the =wire-cell= command line.

The form of the configuration information is specific to the component's concrete class.  
In general, a component's configuration information is in the form of a dictionary (set of key/value pairs).

Configuration data structures may be supplied by the user on the =wire-cell= command line.  
There, the representation of the information is formatted as [[http://www.json.org/][JSON]].
The representation must follow the schema understood by =wire-cell=. 
It follows a nested set of dictionaries three levels deep.

- top :: overall configuration is a dictionary keyed by component class names.
- class :: each class dictionary is keyed by instance names (=""= indicates an unspecified instance).
- instance :: each instance dictionary is keyed by component-specific configurable parameter names.

**** Dumping default component configuration

Every component that can be configured can also produce a representation of its default configuration and this can be dumped to the user through the =wire-cell= CLI.

**** A note on use of JSON for configuration

In principle JSON is accessible to humans as it is "just plain text" of a simple format and Wire Cell requires to follow a simple schema.
However, JSON is merely a data representation syntax.
It provides no facilities to assure consistency, exploit symmetries, express iterations or other features that more full-featured configuration languages (and certainly programming languages) provide.
As such, when any given configuration grows to a certain size it will quickly become a burden to manage manually.
Thus, it is expected that some external mechanism will be developed and used to the JSON configuration.
At some later time, Wire Cell may provide tools for this. 

